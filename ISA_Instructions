#include "Global_Variables.h"

/*
    Misc Instructions
*/

void LUI(int rd, int imm) { // Load Upper Immediate
    Registers[rd] = imm << 12;
    ProgramCounter += 4; 
}

void AUIPC(int rd, int imm) { // Add Upper Immediate to PC  
    Registers[rd] = ProgramCounter + (imm << 12);
    ProgramCounter += 4; 
}

void JAL(int rd, int offset) { // Jump and Link
    Registers[rd] = ProgramCounter + 4;
    ProgramCounter += offset; 
}

void JALR(int rd, int rs1, int offset) { // Jump and Link Register
    Registers[rd] = ProgramCounter + 4;
    ProgramCounter = Registers[rs1] + offset; 
}

/*
    Branch Instructions
*/
void BEQ(int rs1, int rs2, int offset){ // Branch if Equal
    if (Registers[rs1] == Registers[rs2]){
        ProgramCounter += offset;
    }
}

void BNE(int rs1, int rs2, int offset){ // Branch if Not Equal
    if (Registers[rs1] != Registers[rs2]) {
        ProgramCounter += offset; 
    }
}

void BLT(int rs1, int rs2, int offset){ // Branch if Less Than
    if (Registers[rs1] < Registers[rs2]){
        ProgramCounter += offset;
    }
}

void BGE(int rs1, int rs2, int offset){ // Branch if Greater Than or Equal
    if (Registers[rs1] >= Registers[rs2]){
        ProgramCounter += offset;
    }
}

void BLTU(int rs1, int rs2, int offset){ // Branch if Less Than Unsigned
    if ((unsigned)Registers[rs1] < (unsigned)Registers[rs2]){
        ProgramCounter += offset;
    }
}

void BGEU(int rs1, int rs2, int offset){ // Branch if Greater Than Unsigned
     if ((unsigned int)Registers[rs1] >= (unsigned int)Registers[rs2]) {
        ProgramCounter += offset;
    }
}

/*
    Load Instructions
*/
void LB(int rd, int offset, int rs1){ // Load Byte
    int *rs1ad = &Registers[rs1];
    int MemAddress = rs1ad + offset;
    int *pMemAddress = MemAddress;
    *pMemAddress = *pMemAddress >> 8;
    //Registers[rd] = *pMemAddress;
}

void LH(int rd, int offset, int rs1){ // Load Halfword
    int *rs1ad = &Registers[rs1];
    int MemAddress = rs1ad + offset;
    int *pMemAddress = MemAddress;
    *pMemAddress = *pMemAddress >> 4;
    //Registers[rd] = *pMemAddress;
}

void LW(int rd, int offset, int rs1){ // Load Word
    int *rs1ad = &Registers[rs1];
    int MemAddress = rs1ad + offset;
    int *pMemAddress = MemAddress;
    int* regPtr = Registers[rd];
    //Registers[rd] = *pMemAddress;
}

void LBU(int rd, int offset, int rs1){ // Load Byte Unsigned
    int *rs1ad = &Registers[rs1];
    int MemAddress = (unsigned)rs1ad + offset;
    int *pMemAddress = MemAddress;
    *pMemAddress = *pMemAddress >> 8;
    //Registers[rd] = *pMemAddress;
}

void LHU(int rd, int offset, int rs1){ // Load Halfword Unsigned
    int *rs1ad = &Registers[rs1];
    int MemAddress = (unsigned)rs1ad + offset;
    int *pMemAddress = MemAddress;
    *pMemAddress = *pMemAddress >> 4;
    //Registers[rd] = *pMemAddress;
}
/*
    Store Instructions
*/
void SB(int rs2, int offset, int rs1){ // Store Byte
    int MemAddress = rs1 + offset;
    int *pMemAddress = MemAddress;
    *pMemAddress = rs2 >> 8;
}

void SH(int rs2, int offset, int rs1){ // Store Halfword
    int MemAddress = rs1 + offset;
    int *pMemAddress = MemAddress;
    *pMemAddress = rs2 >> 4;
}

void SW(int rs2, int offset, int rs1){ // Store Word
    int MemAddress = rs1 + offset;
    int *pMemAddress = MemAddress;
    *pMemAddress = rs2;
}

/*
    Immediate Instructions
*/
void ADDI(int rd, int rs1, int imm){ // Add Immediate
    Registers[rd] = Registers[rs1] + imm;
}

void SLTI(int rd, int rs1, int imm){ // Set Less Than Immediate
    Registers[rd] = (Registers[rs1] < imm) ? 1 : 0;
}

void SLTIU(int rd, int rs1, int imm){ // Set less than Immediate Unsigned
    Registers[rd] = ((unsigned int)Registers[rs1] < (unsigned int)imm)? 1 : 0;
}

void XORI(int rd, int rs1, int imm){ // XOR Immediate
    Registers[rd] = Registers[rs1] ^ imm;    
}

void ORI(int rd, int rs1, int imm){ // OR Immediate
    Registers[rd] = Registers[rs1] | imm;
}

void ANDI(int rd, int rs1, int imm){ // AND Immediate
    Registers[rd] = Registers[rs1] & imm;
}

void SLLI(int rd, int rs1, int shamt){ // Shift Left Logical Immediate
    Registers[rd] = Registers[rs1] << shamt;
}

void SRLI(int rd, int rs1, int shamt){ // Shift Right Logical Immediate
    Registers[rd] = Registers[rs1] >> shamt; 
}

void SRAI(int rd, int rs1, int shamt){ // Shift Right Arithmetic Immediate
    Registers[rd] = Registers[rs1] >> shamt; 
}
/*
    Register Instructions
*/

void ADD(int rd, int rs1, int rs2){ // Add
    Registers[rd] = Registers[rs1] + Registers[rs2];
}

void SUB(int rd, int rs1, int rs2){ // Subtract
    Registers[rd] = Registers[rs1] - Registers[rs2];
}

void SLL(int rd, int rs1, int rs2){ // Shift Left Logical
    Registers[rd] = (unsigned)Registers[rs1] << Registers[rs2];
}

void SLT(int rd, int rs1, int rs2){ // Set Less Than
    Registers[rd] = (Registers[rs1] < Registers[rs2]) ? 1 : 0;
}

void SLTU(int rd, int rs1, int rs2){ // Set Less Than Unsigned
    Registers[rd] = ((unsigned)Registers[rs1] < (unsigned)Registers[rs2]) ? 1 : 0; // unsigned is the same as unsigned int
}

void XOR(int rd, int rs1, int rs2){ // XOR
    Registers[rd] = Registers[rs1] ^ Registers[rs2];
}

void SRL(int rd, int rs1, int rs2){ // Shift Right Logical
    Registers[rd] = (unsigned)Registers[rs1] >> Registers[rs2];
}

void SRA(int rd, int rs1, int rs2){ // Shift Right Arithmetic
    Registers[rd] = Registers[rs1] >> Registers[rs2];
}

void OR(int rd, int rs1, int rs2){ // OR
    Registers[rd] = Registers[rs1] | Registers[rs2];
}

void AND(int rd, int rs1, int rs2){ // AND
    Registers[rd] = Registers[rs1] & Registers[rs2];
}